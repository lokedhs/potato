(in-package :potato-tests)

(declaim (optimize (speed 0) (safety 3) (debug 3)))

(define-test create-new-channel-test (:contexts #'all-context :tags '(channel))
  (let* ((channel-name "Test channel")
         (user (potato.workflow:register-user "foo@foo.com" "Foo user" nil nil t))
         (domain (potato.core::load-private-domain-for-user user))
         (group (potato.core::create-group "Testgroup" domain :users (list user)))
         (channel (potato.core::create-channel channel-name group nil)))
    (let ((potato.core::*current-auth-user* user))
      (let ((loaded (potato.core:load-channel-with-check (potato.db:persisted-entry/couchdb-id channel) :if-not-joined :join)))
        (assert-equal channel-name (potato.core:channel/name loaded))))))

(define-test default-channel-for-user-test (:contexts #'all-context :tags '(channel))
  (let* ((user (potato.workflow:register-user "foo@foo.com" "Foo user" nil nil t))
         (domain (potato.core::load-private-domain-for-user user))
         (group (potato.core::find-default-group-in-domain domain))
         (channels (potato.core::find-channels-for-group group)))
    (assert-eql 1 (length channels))
    (let ((potato.core::*current-auth-user* user))
      (let ((loaded (potato.core:load-channel-with-check (potato.db:persisted-entry/couchdb-id (car channels))
                                                         :if-not-joined :join)))
        (assert-true (potato.core::user-is-in-channel-p loaded user))))))
