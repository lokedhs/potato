(in-package :potato.settings)

(declaim #.potato.common::*compile-decl*)

(defun show-settings-screen (extra-fields)
  ;; We reload the user here since this function can be called
  ;; immediately after updating a user
  (let* ((user (potato.core:load-user (potato.core:user/id (potato.core:current-user))))
         (data `((:api-token . ,(potato.core:user/api-token user))
                 (:image-assigned-p . ,(string/= (potato.core:user/image-name user) ""))
                 (:image-url . ,(potato.user-image:image-url-for-user user))
                 (:description . ,(potato.core:user/description user))
                 (:nickname . ,(potato.core:user/nickname user))
                 ,@extra-fields)))
    (log:trace "Showing settings: ~s" data)
    (lofn:show-template-stream "settings.tmpl" data)))

(potato.core:define-handler-fn-login (settings-screen "/settings" nil ())
  (potato.core:with-authenticated-user ()
    (lofn:case-method
      (:get (show-settings-screen nil))
      (:post (lofn:with-checked-parameters ((description :trimmed t) (nickname :trimmed t) password1 password2)
               (let* ((loaded-user (potato.core:load-user (potato.core:ensure-user-id (potato.core:current-user))))
                      (response nil)
                      (updated nil)
                      (error-p nil))
                 (cond ((equal description "")
                        (push '(:description-error . "Name can't be blank") response)
                        (setq error-p t))
                       (t
                        (setf (potato.core:user/description loaded-user) description)
                        (setq updated t)))
                 (cond ((not (equal password1 password2))
                        (push '(:password-error . "Passwords do not match") response)
                        (setq error-p t))
                       ((zerop (length password1))
                        nil)
                       ((plusp (length password1))
                        (potato.core:user/update-password loaded-user password1)
                        (setq updated t)
                        (push '(:password-message . "Password changed") response)))
                 (cond ((equal nickname (potato.core:user/nickname loaded-user))
                        nil)
                       ((equal nickname "")
                        (push '(:nickname-error . "Nickname can't be blank") response)
                        (setq error-p t))
                       ((not (potato.core:valid-user-nickname-p nickname))
                        (push '(:nickname-error . "Invalid nickname (allowed charcters are a-z, 0-9, _ and -)") response)
                        (setq error-p t))
                       ((potato.core:nickname-is-in-use-p nickname)
                        (push '(:nickname-error . "Nickname is in use") response)
                        (setq error-p t))
                       (t
                        (setf (potato.core:user/nickname loaded-user) nickname)
                        (setq updated t)))
                 (when (potato.core:user/new-login loaded-user)
                   (setf (potato.core:user/new-login loaded-user) nil)
                   (setq updated t))
                 (when (and (null error-p) updated)
                   (potato.core:save-user loaded-user))
                 (show-settings-screen response)))))))

(potato.core:define-handler-fn-login (update-password-screen "/update-password" nil ())
  (potato.core:with-authenticated-user ()
    (labels ((show-update-password-screen (msg)
               (lofn:show-template-stream "update-password.tmpl" (if msg
                                                                     `((:password-error . ,msg))
                                                                     nil))))
      (log:debug "In update password, method: ~s" (hunchentoot:request-method*))
      (lofn:case-method
        (:get (show-update-password-screen nil))
        (:post (lofn:with-checked-parameters (password1 password2)
                 (let ((loaded-user (potato.core:load-user (potato.core:ensure-user-id (potato.core:current-user)))))
                   (cond ((not (equal password1 password2))
                          (show-update-password-screen "Passwords do not match"))
                         ((zerop (length password1))
                          (show-update-password-screen "Password can't be blank"))
                         ((plusp (length password1))
                          (potato.core:user/update-password loaded-user password1)
                          (potato.db:save-instance loaded-user)
                          (hunchentoot:redirect "/"))))))))))
